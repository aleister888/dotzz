#!/bin/bash
# shellcheck disable=SC2155

#fecha_Y-m-d,total_kg,reps,rpe,status,note

# Parámetros del script
export INPUT_DIR=${1:-$(pwd)}
export DATA_DIR="$INPUT_DIR/data"
export WEIGHT_DIR="$INPUT_DIR/weight"
export VOLUME_DIR="$INPUT_DIR/volume"
export VOLUME_CSV_DIR="$VOLUME_DIR/csv"
export VOLUME_PLOT_DIR="$VOLUME_DIR/plot"
export WEIGHT_CSV_DIR="$WEIGHT_DIR/csv"
export WEIGHT_PLOT_DIR="$WEIGHT_DIR/plot"

# Función para procesar cada archivo CSV
process_csv() {
	local -r FILE="$1"
	local -r EXERCISE_NAME=$(basename "$FILE" .csv)
	local -r DIR_NAME=$(dirname "$FILE")
	local -r OUT_DIR="${DIR_NAME#"${DATA_DIR}"/}"
	local -r WEIGHT_FILE="$WEIGHT_CSV_DIR/$OUT_DIR/$EXERCISE_NAME.csv"
	local -r VOLUME_FILE="$VOLUME_CSV_DIR/$OUT_DIR/$EXERCISE_NAME.csv"
	local -r WEIGHT_PLOT_FILE="$WEIGHT_PLOT_DIR/$OUT_DIR/$EXERCISE_NAME.png"
	local -r VOLUME_PLOT_FILE="$VOLUME_PLOT_DIR/$OUT_DIR/$EXERCISE_NAME.png"
	# Cambiamos los '_' por ' ' y para cada palabra convertimos
	# el primer caracter en mayúsucula y el resto en minúsculas
	local -r PLOT_NAME="$(
		echo "$EXERCISE_NAME" | sed 's/_/ /g' |
			awk '{for(i=1;i<=NF;i++) $i=toupper(substr($i,1,1)) tolower(substr($i,2))}1'
	)"

	mkdir -p "$(dirname "$VOLUME_FILE")"
	mkdir -p "$(dirname "$WEIGHT_FILE")"
	mkdir -p "$(dirname "$WEIGHT_PLOT_FILE")"
	mkdir -p "$(dirname "$VOLUME_PLOT_FILE")"

	[[ ! -s "$FILE" ]] && return

	mapfile -t ALL_ROWS < <(awk -F, 'NR > 1 {print $0}' "$FILE")

	declare -A MAX_DATA MAX_VOLUME SERIES_COUNT
	MAX_WEIGHT_GLOBAL=0
	MAX_VOLUME_GLOBAL=0
	MIN_WEIGHT_MAX=""
	MIN_VOLUME_WEIGHT_GLOBAL=""
	MAX_VOLUME_WEIGHT_GLOBAL=""
	DEFAULT_RPE="N/A" # RPE por defecto (en caso de que el campo este vacío)

	for ROW in "${ALL_ROWS[@]}"; do
		IFS=',' read -r DATE W R RPE STATUS NOTES <<<"$ROW"
		# Nos saltamos las entradas que no tienen anotado el peso o las repeticiones
		[[ -z "$W" || -z "$R" ]] && continue
		[[ -n "$W" && -n "$R" ]] && VOLUME=$(echo "scale=0; $W * $R / 1" | bc) || VOLUME=0
		# Nos saltamos las series con "warm" o "nolog"
		[[ "$STATUS" = warm || "$STATUS" = "nolog" ]] && continue

		# Si no hay RPE, asignamos el valor por defecto
		RPE="${RPE:-$DEFAULT_RPE}"

		# Contamos cuántas series hubo por ejercicio y día
		SERIES_COUNT[$DATE]=$((${SERIES_COUNT[$DATE]:-0} + 1))

		# Variables que guardan el peso, repeticiones y volumen calculado que
		# contiene la fecha en cada iteración
		CURRENT_W=$(echo "${MAX_DATA[$DATE]}" | cut -d',' -f1)
		CURRENT_R=$(echo "${MAX_DATA[$DATE]}" | cut -d',' -f2)
		CURRENT_V=$(echo "${MAX_VOLUME[$DATE]}" | awk -F',' '{print $1 * $2}')

		# Actualiza máximo de peso por fecha
		if [[ -z "${MAX_DATA[$DATE]}" ||
			"$(echo "$W > $CURRENT_W" | bc)" -eq 1 ||
			("$(echo "$W == $CURRENT_W" | bc)" -eq 1 && "$(echo "$R > $CURRENT_R" | bc)" -eq 1) ]]; then
			MAX_DATA[$DATE]="$W,$R,$RPE,$STATUS,$NOTES"
		fi

		# Actualiza máximo de volumen por fecha
		if [[ -z "${MAX_VOLUME[$DATE]}" || "$(echo "$VOLUME > $CURRENT_V" | bc)" -eq 1 ]]; then
			MAX_VOLUME[$DATE]="$W,$R,$RPE,$STATUS,$NOTES"

			# Actualiza pesos para gráfica de volumen
			if [[ -z "$MAX_VOLUME_WEIGHT_GLOBAL" || "$(echo "$W > $MAX_VOLUME_WEIGHT_GLOBAL" | bc)" -eq 1 ]]; then
				MAX_VOLUME_WEIGHT_GLOBAL="$W"
			fi
			if [[ -z "$MIN_VOLUME_WEIGHT_GLOBAL" || "$(echo "$W < $MIN_VOLUME_WEIGHT_GLOBAL" | bc)" -eq 1 ]]; then
				MIN_VOLUME_WEIGHT_GLOBAL="$W"
			fi
		fi

		# Actualiza máximos globales
		MAX_WEIGHT_GLOBAL=$(awk -v a="$MAX_WEIGHT_GLOBAL" -v b="$W" 'BEGIN {print (b > a) ? b : a}')
		MAX_VOLUME_GLOBAL=$(awk -v a="$MAX_VOLUME_GLOBAL" -v b="$VOLUME" 'BEGIN {print (b > a) ? b : a}')

		# Actualiza mínimos globales
		if [[ -z "$MIN_WEIGHT_MAX" || "$(echo "$W < $MIN_WEIGHT_MAX" | bc)" -eq 1 ]]; then
			MIN_WEIGHT_MAX="$W"
		fi
	done

	# Genera archivo de pesos máximos (solo días con más de 1 serie)
	{
		echo "fecha_Y-m-d,total_kg,reps,rpe,status,notes"
		for DATE in $(echo "${!MAX_DATA[@]}" | tr ' ' '\n' | sort -V); do
			# Solo incluimos días con más de 1 serie
			if ((${SERIES_COUNT[$DATE]} > 1)); then
				echo "$DATE,${MAX_DATA[$DATE]}"
			fi
		done
	} >"$WEIGHT_FILE"

	# Genera archivo de volúmenes máximos (solo días con más de 1 serie)
	{
		echo "fecha_Y-m-d,total_kg,reps,rpe,status,notes"
		for DATE in $(echo "${!MAX_VOLUME[@]}" | tr ' ' '\n' | sort -V); do
			if ((${SERIES_COUNT[$DATE]} > 1)); then
				echo "$DATE,${MAX_VOLUME[$DATE]}"
			fi
		done
	} >"$VOLUME_FILE"

	# Función para generar gráficas
	generate_plot() {
		local -r INPUT_FILE="$1"
		local -r OUTPUT_FILE="$2"
		local -r Y_MIN="$3"
		local -r Y_MAX="$4"
		local -r TITLE="$5"

		cat <<-EOF | gnuplot >/dev/null 2>&1
			set datafile separator ","
			set terminal pngcairo size 1600,1200 enhanced font 'Verdana,16'
			set output '$OUTPUT_FILE'
			set title "$TITLE"
			set xlabel "Fecha"
			set ylabel "Peso (kg)"
			set y2label "Volumen (Peso * Reps)"
			set xdata time
			set timefmt "%Y-%m-%d"
			set format x "%Y-%m-%d"
			set grid lw 1.5
			set ytics
			set y2tics
			set logscale y2
			set xtics rotate by -20
			set yrange [$Y_MIN:$Y_MAX]
			set key at graph 0.2, 0.95
			set key opaque box
			set style textbox opaque noborder

			plot \
				'$INPUT_FILE' using 1:2 with lines lw 6 lc rgb "#9400d3" title "Peso Máximo" axes x1y1, \
				'' using 1:2:3 with points pt 7 ps 2 lc rgb "#9400d3" title "Repeticiones", \
				'' using 1:(\$2 * \$3) with lines dt 3 lw 3 title "Peso * Reps" axes x1y2, \
				'' using 1:(\$2 * (36 / (37 - \$3))) with lines lw 0.7 title "RM (Brzycki)" axes x1y1, \
				'' using 1:(\$2 * (1 + 0.025 * \$3)) with lines lw 0.7 title "RM (O'Conner)" axes x1y1, \
				'' using 1:(\$2 * (\$3 ** 0.1)) with lines lw 0.7 title "RM (Lombardi)" axes x1y1, \
				'' using 1:2:3 with labels offset 0,1 notitle axes x1y1, \
				'' using 1:2:(sprintf("RPE: %s", strcol(4))) with labels boxed offset 0,-1.5 font ",10" notitle axes x1y1
		EOF
	}

	# Gráfica de Peso Máximo
	if [[ "$(wc -l <"$WEIGHT_FILE")" -gt 2 ]]; then
		Y1_MAX=$(echo "scale=2; $MAX_WEIGHT_GLOBAL * 1.5" | bc)
		Y1_MIN=$(echo "scale=2; $MIN_WEIGHT_MAX / 1.5" | bc)
		generate_plot "$WEIGHT_FILE" "$WEIGHT_PLOT_FILE" "$Y1_MIN" "$Y1_MAX" "$PLOT_NAME (Peso máximo)"
	fi

	# Gráfica de Volumen Máximo
	if [[ "$(wc -l <"$VOLUME_FILE")" -gt 2 ]]; then
		Y2_MAX=$(echo "scale=2; $MAX_VOLUME_WEIGHT_GLOBAL * 1.5" | bc)
		Y2_MIN=$(echo "scale=2; $MIN_VOLUME_WEIGHT_GLOBAL / 1.5" | bc)
		generate_plot "$VOLUME_FILE" "$VOLUME_PLOT_FILE" "$Y2_MIN" "$Y2_MAX" "$PLOT_NAME (Volumen Máximo)"
	fi
}

if [[ ! -d "$DATA_DIR" ]]; then
	echo "Error: El directorio '$DATA_DIR' no existe." >&2
	exit 1
fi

export -f process_csv

find "$DATA_DIR" -type f -name "*.csv" ! -path "$WEIGHT_DIR/*" ! -path "$VOLUME_DIR/*" |
	parallel process_csv {}
